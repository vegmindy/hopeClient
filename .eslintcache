[{"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\index.js":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\ReviewUpdate.jsx":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Search\\Search.jsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Auth\\Auth.jsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\UpdateLink.jsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\DeleteLink.jsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\ReviewAll.jsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\Review.jsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\ReviewAdd.jsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\App.js":"10","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\AllUsersReviews.jsx":"11","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Home.jsx":"12","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Navbar\\Navbar.jsx":"13"},{"size":609,"mtime":1606936544006,"results":"14","hashOfConfig":"15"},{"size":2260,"mtime":1606969783526,"results":"16","hashOfConfig":"15"},{"size":8332,"mtime":1606949994607,"results":"17","hashOfConfig":"15"},{"size":4674,"mtime":1606949994602,"results":"18","hashOfConfig":"15"},{"size":644,"mtime":1606936544002,"results":"19","hashOfConfig":"15"},{"size":644,"mtime":1606936543998,"results":"20","hashOfConfig":"15"},{"size":2514,"mtime":1606949994604,"results":"21","hashOfConfig":"15"},{"size":790,"mtime":1606936543999,"results":"22","hashOfConfig":"15"},{"size":3239,"mtime":1606949994603,"results":"23","hashOfConfig":"15"},{"size":1679,"mtime":1606973681317,"results":"24","hashOfConfig":"15"},{"size":2308,"mtime":1606975583252,"results":"25","hashOfConfig":"15"},{"size":146,"mtime":1606936543996,"results":"26","hashOfConfig":"15"},{"size":1357,"mtime":1606974707733,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"135w3d0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\index.js",[],["58","59"],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\ReviewUpdate.jsx",["60","61","62","63","64"],"import React, {useState} from 'react';\r\nimport {Button, Form, FormGroup, Label, Input, Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport TokenContext from '../../Contexts/TokenContext'\r\nimport APIURL from '../../helpers/environment'\r\n\r\nconst ReviewEdit = (props) => {\r\n    let tokenthing = React.useContext(TokenContext)\r\n    let token = tokenthing.token\r\n\r\n    const [editRating, setEditRating] = useState(props.location.state.userRating);\r\n    const [editReview, setEditReview] = useState(props.location.state.userReview);\r\n\r\n    const reviewUpdate = (event, review) => {\r\n        event.preventDefault();\r\n\r\n        let jsonBody = {\r\n            userRating: editRating,\r\n            userReview: editReview\r\n        }\r\n        fetch(`${APIURL}/updatereview/${props.location.state.reviewID}`,{\r\n            method: 'PUT',\r\n            body: JSON.stringify({log: {rating: editRating, review: editReview}}),\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            }\r\n        }) .then((res) => res.json())\r\n    }\r\n    return(\r\n        <div>\r\n\r\n                <Form onSubmit={reviewUpdate}>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"rating\">Edit Rating:</Label>\r\n                        <Input name=\"rating\" value={editRating} onChange={(e)=> setEditRating(e.target.value)}/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"review\">Edit Review:</Label>\r\n                        <Input name=\"review\" value={editReview} onChange={(e) => setEditReview(e.target.value)}/>\r\n                    </FormGroup>\r\n                    <Button type=\"submit\">Update Review</Button>\r\n                </Form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ReviewEdit;\r\n\r\n\r\n\r\n// //update\r\n// const editReview = (review) => {\r\n//     setReviewToUpdate(review);\r\n//     console.log(review);\r\n// }\r\n\r\n// const updateOn = () => {\r\n//     setUpdateActive(true);\r\n// }\r\n\r\n// const updateOff = () => {\r\n//     setUpdateActive(false)\r\n// }\r\n\r\n// const UpdateReview = () =>{\r\n\r\n//     return(\r\n//         <div>\r\n//         <p>This is update page</p>\r\n//     </div>\r\n// )\r\n// }\r\n// export default UpdateReview;\r\n\r\n\r\n","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Search\\Search.jsx",["65","66","67","68"],"import {useState, useEffect, Component} from 'react';\r\nimport {Container, Row, Col, Button, Input, InputGroup, InputGroupAddon, Modal, ModalHeader, ModalFooter, ModalBody, Card} from 'reactstrap';\r\nimport './Search.css';\r\nimport APIURL from '../../helpers/environment'\r\n\r\nimport Review from '../Review/Review'\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            page: 1,\r\n            resultList: [],\r\n            searchValue: \"\",\r\n            gameModal: {\r\n                show: false,\r\n                name: \"Test Theft Cycle\",\r\n                desc: \"Test Theft Cycle is the next installment in non motorized pedestrian vechile theft game genre.  This will really knock your chains off.\",\r\n                gameId: 0\r\n            }\r\n        }\r\n\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n        this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\r\n        this.toggleGameDetailsModal = this.toggleGameDetailsModal.bind(this);\r\n    }\r\n\r\n    defaultLoad() {  //Called after page is loaded.\r\n        this.loadPage();\r\n    }\r\n\r\n    handleSearchChange(event) { //Called everytime you type a character into search bar\r\n        this.setState({\r\n            searchValue: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSearchSubmit(event) { //Called when you hit the search button\r\n        this.searchGame(1);\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    searchGame(pageNum) { //Used to lookup the search from our server and returns the resutls\r\n        let body = {\r\n            page: pageNum,\r\n            searchQuery: this.state.searchValue\r\n        }\r\n\r\n        fetch(`${APIURL}/search/`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data.results);\r\n                this.setState({\r\n                    resultList: data.results.map((item) => { return {name: item.name, backgroundImage: item.background_image, gameId: item.id}})\r\n                });\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    loadPage() { //Loads a specific page, depending on search or just default load\r\n        let pageNum = this.state.page;\r\n\r\n        console.log(pageNum)\r\n\r\n        if (this.state.searchValue !== \"\") {\r\n            this.searchGame(pageNum);\r\n            return;\r\n        }\r\n\r\n        fetch(`${APIURL}/search/page/${pageNum}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data.results)\r\n                this.setState({\r\n                    resultList: data.results.map((item) => { return {name: item.name, backgroundImage: item.background_image, gameId: item.id}})\r\n                });\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    changePage(amount) { //changes the page by a specific amount\r\n        let newPage = this.state.page + amount;\r\n\r\n        console.log(newPage)\r\n\r\n        if (newPage < 1) {\r\n            this.setState({\r\n                page: 1\r\n            }, () => {this.loadPage()})\r\n        } else {\r\n            this.setState({\r\n                page: newPage\r\n            }, () => {this.loadPage()})\r\n        }\r\n    }\r\n\r\n    showGameDetails(id) {\r\n        let tmpGameModal = this.state.gameModal;\r\n\r\n        fetch(`${APIURL}/search/game/${id}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data) //SHOWS US DATA FROM THE GAME WE CLICK ON\r\n\r\n                let gameObj = {\r\n                    name: data.name,\r\n                    desc: data.description_raw,\r\n                    id: data.id\r\n                }\r\n\r\n                let tmpGameModal = this.state.gameModal;\r\n\r\n                tmpGameModal.name = gameObj.name;\r\n                tmpGameModal.desc = gameObj.desc;\r\n                tmpGameModal.gameId = gameObj.id;\r\n\r\n                this.setState({ gameModal: tmpGameModal });\r\n\r\n                this.toggleGameDetailsModal();\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    toggleGameDetailsModal() {\r\n        let tmpGameModal = this.state.gameModal;\r\n\r\n        tmpGameModal.show = !this.state.gameModal.show;\r\n\r\n        this.setState({ gameModal: tmpGameModal});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.defaultLoad();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{padding: '10px'}}>\r\n                <div style={{padding: '5px'}}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col>\r\n                                    <InputGroup>\r\n                                        <Input style={{height: \"auto\"}} type=\"text\" value={this.state.searchValue} onChange={this.handleSearchChange} placeholder=\"Search...\" />\r\n                                        <InputGroupAddon addonType=\"append\">\r\n                                            <Button onClick={this.handleSearchSubmit} type=\"button\" color=\"dark\">Submit</Button>\r\n                                        </InputGroupAddon>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                </div>\r\n                <Container style={{backgroundColor: \"dark\"}}>\r\n                    <Card body style={{height: '600px'}}>\r\n                        <div style={{height: '100%', overflowY: 'scroll', overflowX: 'hidden'}}>\r\n                        {\r\n                            this.state.resultList.map((item) => {\r\n                                return <Row>\r\n                                    <Col onClick={() => {this.showGameDetails(item.gameId)}}>\r\n                                        <div className=\"gameContainer\" style={{\r\n                                                backgroundImage: (item.backgroundImage !== null)\r\n                                                ? \"url('\" + item.backgroundImage +\"')\" : \"linear-gradient(135deg, #231437 0%, #2c385e 50%, #336e6b 100%)\"\r\n                                            }}>\r\n\r\n                                            <div className=\"gameTitle\">{item.name}</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            })\r\n                        }\r\n                        </div>\r\n                    </Card>\r\n                </Container>\r\n                <div>\r\n                    <div style={{padding: '5px'}}>\r\n                            <Container>\r\n                                <Row style={{backgroundColor: \"dark\"}}>\r\n                                    <Col>\r\n                                        <Button className=\"float-left\" onClick={() => {this.changePage(-1)}} color=\"dark\">Previous</Button>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Button className=\"float-right\" onClick={() => {this.changePage(1)}} color=\"dark\">Next</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                    </div>\r\n                </div>\r\n                <Container>\r\n                    <Modal size=\"lg\" isOpen={this.state.gameModal.show} toggle={this.toggleGameDetailsModal} >\r\n                        <ModalHeader toggle={this.toggleGameDetailsModal}>{this.state.gameModal.name}</ModalHeader>\r\n                        <ModalBody>\r\n                            {this.state.gameModal.desc}\r\n                            <Review gameId={this.state.gameModal.gameId} gameName={this.state.gameModal.name}/>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </Container>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Auth\\Auth.jsx",["69"],"import React, { useState } from 'react';\r\nimport './Auth.css';\r\nimport TokenContext from '../../Contexts/TokenContext'\r\nimport { Button } from \"reactstrap\"\r\nimport { Redirect, useLocation, useHistory } from 'react-router-dom';\r\nimport APIURL from '../../helpers/environment'\r\n\r\nconst Auth = (props) => {\r\n    console.log(props);\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [login, setLogin] = useState(true);\r\n\r\n    let tokenContext = React.useContext(TokenContext)\r\n    let location = useLocation()\r\n    let history = useHistory();\r\n\r\n    console.log(\"auth context\", tokenContext)\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n\r\n        const url = login ? `${APIURL}/user/login` : `${APIURL}/user/register`;\r\n\r\n        const bodyObj = login ? {\r\n            email: email,\r\n            password: password\r\n        } : {\r\n                email: email,\r\n                password: password,\r\n                firstName: firstName,\r\n                lastName: lastName\r\n            }\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(bodyObj)\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                tokenContext.setToken(data.token);\r\n                localStorage.setItem('sessionToken', data.token);\r\n\r\n                history.push('/search')\r\n            })\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        console.log('location', location)\r\n        if (location.pathname === '/logout') {\r\n            tokenContext.setToken('');\r\n            localStorage.setItem('sessionToken', '');\r\n        }\r\n    }\r\n\r\n    const title = () => {\r\n        return login ? 'Login' : 'Signup';\r\n    }\r\n\r\n    const loginToggle = (event) => {\r\n        event.preventDefault();\r\n        setLogin(!login);\r\n        setFirstName(\"\");\r\n        setLastName(\"\");\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n    }\r\n\r\n    const signupFields = () => {\r\n        return !login ? (\r\n            <div>\r\n                <p>If you already have an account click the Login/Signup button to go the Login page!</p>\r\n                <label htmlFor=\"firstName\">First Name</label>\r\n                <br />\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"firstName\"\r\n                    value={firstName}\r\n                    onChange={(event) => setFirstName(event.target.value)}\r\n                />\r\n                <br />\r\n                <label htmlFor=\"lastName\">Last Name</label>\r\n                <br />\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"lastName\"\r\n                    value={lastName}\r\n                    onChange={(event) => setLastName(event.target.value)}\r\n                />\r\n            </div>\r\n        ) : null\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrap\">\r\n            <div className=\"clearFix\"></div>\r\n            <div>\r\n                {\r\n                    handleLogout()\r\n                }\r\n                <form onSubmit={handleSubmit}>\r\n                    <h1>{title()}</h1>\r\n                    {signupFields()}\r\n                    <label htmlFor=\"email\">Email:</label>\r\n                    <br />\r\n                    <input type=\"text\" id=\"email\"\r\n                        value={email} placeholder=\"email@email.com\" onChange={(event) => {\r\n                            console.log(event)\r\n                            setEmail(event.target.value);\r\n                        }} />\r\n                    <br />\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <br />\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={password}\r\n                        placeholder=\"password\"\r\n                        onChange={(event) => {\r\n                            // console.log(event.target.value)\r\n                            setPassword(event.target.value)\r\n                        }}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <Button className=\"authButton\" onClick={loginToggle}>Login/Signup</Button>\r\n                    <br />\r\n                    <Button className=\"authButton\" type=\"submit\">Submit User Data</Button>\r\n                </form>\r\n                <div className=\"clearFix\"></div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\UpdateLink.jsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\DeleteLink.jsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\ReviewAll.jsx",["70","71","72","73","74"],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\Review.jsx",["75","76","77","78","79"],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\ReviewAdd.jsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\App.js",["80","81","82"],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Review\\AllUsersReviews.jsx",["83","84","85"],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Home.jsx",["86"],"C:\\Users\\Schul\\OneDrive\\Desktop\\C#repos\\TeamHope\\hopeClient\\src\\Components\\Navbar\\Navbar.jsx",["87","88","89","90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":2,"column":48,"nodeType":"98","messageId":"99","endLine":2,"endColumn":53},{"ruleId":"96","severity":1,"message":"100","line":2,"column":55,"nodeType":"98","messageId":"99","endLine":2,"endColumn":66},{"ruleId":"96","severity":1,"message":"101","line":2,"column":68,"nodeType":"98","messageId":"99","endLine":2,"endColumn":77},{"ruleId":"96","severity":1,"message":"102","line":16,"column":13,"nodeType":"98","messageId":"99","endLine":16,"endColumn":21},{"ruleId":"103","severity":1,"message":"104","line":20,"column":9,"nodeType":"105","messageId":"106","endLine":27,"endColumn":17,"fix":"107"},{"ruleId":"96","severity":1,"message":"108","line":1,"column":9,"nodeType":"98","messageId":"99","endLine":1,"endColumn":17},{"ruleId":"96","severity":1,"message":"109","line":1,"column":19,"nodeType":"98","messageId":"99","endLine":1,"endColumn":28},{"ruleId":"96","severity":1,"message":"110","line":2,"column":94,"nodeType":"98","messageId":"99","endLine":2,"endColumn":105},{"ruleId":"96","severity":1,"message":"111","line":111,"column":13,"nodeType":"98","messageId":"99","endLine":111,"endColumn":25},{"ruleId":"96","severity":1,"message":"112","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":18},{"ruleId":"96","severity":1,"message":"113","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":14},{"ruleId":"96","severity":1,"message":"114","line":3,"column":21,"nodeType":"98","messageId":"99","endLine":3,"endColumn":24},{"ruleId":"96","severity":1,"message":"115","line":3,"column":26,"nodeType":"98","messageId":"99","endLine":3,"endColumn":29},{"ruleId":"96","severity":1,"message":"116","line":3,"column":31,"nodeType":"98","messageId":"99","endLine":3,"endColumn":37},{"ruleId":"117","severity":1,"message":"118","line":28,"column":8,"nodeType":"119","endLine":28,"endColumn":10,"suggestions":"120"},{"ruleId":"96","severity":1,"message":"109","line":1,"column":20,"nodeType":"98","messageId":"99","endLine":1,"endColumn":29},{"ruleId":"96","severity":1,"message":"121","line":2,"column":18,"nodeType":"98","messageId":"99","endLine":2,"endColumn":23},{"ruleId":"96","severity":1,"message":"122","line":6,"column":12,"nodeType":"98","messageId":"99","endLine":6,"endColumn":19},{"ruleId":"96","severity":1,"message":"123","line":6,"column":21,"nodeType":"98","messageId":"99","endLine":6,"endColumn":31},{"ruleId":"96","severity":1,"message":"124","line":8,"column":11,"nodeType":"98","messageId":"99","endLine":8,"endColumn":28},{"ruleId":"96","severity":1,"message":"125","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"126","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":12},{"ruleId":"96","severity":1,"message":"127","line":14,"column":8,"nodeType":"98","messageId":"99","endLine":14,"endColumn":14},{"ruleId":"96","severity":1,"message":"114","line":3,"column":21,"nodeType":"98","messageId":"99","endLine":3,"endColumn":24},{"ruleId":"96","severity":1,"message":"115","line":3,"column":26,"nodeType":"98","messageId":"99","endLine":3,"endColumn":29},{"ruleId":"96","severity":1,"message":"116","line":3,"column":31,"nodeType":"98","messageId":"99","endLine":3,"endColumn":37},{"ruleId":"96","severity":1,"message":"128","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":12},{"ruleId":"96","severity":1,"message":"129","line":10,"column":3,"nodeType":"98","messageId":"99","endLine":10,"endColumn":23},{"ruleId":"96","severity":1,"message":"130","line":11,"column":3,"nodeType":"98","messageId":"99","endLine":11,"endColumn":17},{"ruleId":"96","severity":1,"message":"131","line":12,"column":3,"nodeType":"98","messageId":"99","endLine":12,"endColumn":15},{"ruleId":"96","severity":1,"message":"132","line":13,"column":3,"nodeType":"98","messageId":"99","endLine":13,"endColumn":15},{"ruleId":"96","severity":1,"message":"133","line":14,"column":3,"nodeType":"98","messageId":"99","endLine":14,"endColumn":13},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'jsonBody' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property then.","MemberExpression","unexpectedWhitespace",{"range":"136","text":"137"},"'useState' is defined but never used.","'useEffect' is defined but never used.","'ModalFooter' is defined but never used.","'tmpGameModal' is assigned a value but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'Table' is defined but never used.","'reviews' is assigned a value but never used.","'setReviews' is assigned a value but never used.","'toggleReviewModal' is assigned a value but never used.","'Review' is defined but never used.","'Home' is defined but never used.","'APIURL' is defined but never used.","'Auth' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'NavbarText' is defined but never used.","no-global-assign","no-unsafe-negation",[1056,1058],".",{"desc":"139","fix":"140"},"Update the dependencies array to be: [token]",{"range":"141","text":"142"},[965,967],"[token]"]